//
// AGSteam: Steam API Plugin for AGS
// (C) 2011-2014 MonkeyMoto Productions, Inc.
//
// NOTICE: THIS FILE IS NOT OPEN SOURCE, AND SHOULD NEVER LEAVE THE PROPERTIES OF MONKEYMOTO PRODUCTIONS, INC.
// ("MMP") WITHOUT PRIOR EXPRESS WRITTEN PERMISSION INCLUDED AS AN ADDENDUM BELOW, ONLY BY AUTHORIZED
// PERSONNEL ACTING ON BEHALF OF MMP. IF YOU HAVE NOT BEEN SO AUTHORIZED AND HAVE OBTAINED THIS FILE, YOU ARE
// UNDER LEGAL OBLIGATION TO DELETE ALL COPIES OF IT AND ALL DERIVATIVE WORKS IMMEDIATELY. MMP AND AFFILIATED
// PARTIES SHALL NOT BE HELD LIABLE FOR ANY UNAUTHORIZED USAGE OR DISTRIBUTION OF THIS FILE, INTERNALLY OR BY
// ANY THIRD-PARTY. BY ACCESSING THIS FILE YOU ARE AGREEING TO THE TERMS AND CONDITIONS OF THIS NOTICE, AND
// ALL APPLICABLE ADDENDUMS, AND MAY BE HELD LEGALLY RESPONSIBLE FOR UNAUTHORIZED USAGE.
//
// ADDENDUM: MMP RESERVES ALL FIRST-PARTY RIGHTS TO THIS FILE AND ITS CONTENTS, INCLUDING, BUT NOT LIMITED TO
// THE RIGHT TO AUTHORIZE THIRD-PARTY USAGE OF THIS FILE, AND THE RIGHT TO REVOKE SUCH AUTHORIZATION FROM ANY
// THIRD-PARTY. AUTHORIZATION MAY BE GRANTED OR REVOKED AT ANY TIME AND FOR ANY REASON BY MMP. UPON NOTICE OF
// REVOCATION OF RIGHTS, THIRD-PARTIES MUST COMPLY IMMEDIATELY WITH THE REVISED TERMS GIVEN BY MMP. ANY
// ADDENDUMS OR CHANGES TO THIS ADDENDUM OR THE PRIOR NOTICE SHALL BE HELD NULL AND VOID BY MMP, PURSUANT TO
// THE RESTRICTIONS STATED WITHIN.
//
// ADDENDUM: IN AGREEMENT WITH WADJET EYE GAMES ("WEG"), THE FOLLOWING PRIVILEGES ARE GRANTED, BEGINNING ON
// 16 FEBRUARY 2013. AUTHORIZED PERSONNEL OF WEG ARE HEREBY AUTHORIZED BY MONKEYMOTO PRODUCTIONS, INC. TO
// ACCESS AND MODIFY THE CONTENTS OF THIS FILE, PURSUANT TO THE PRIOR RESTRICTIONS, AND THE TERMS AND
// CONDITIONS OF EXISTING NON-DISCLOSURE AGREEMENTS BETWEEN VALVE CORPORATION ("VALVE") AND MMP, AND VALVE AND
// WEG. LIMITED AUTHORIZATION IS ALSO GRANTED TO AUTHORIZED WEG PERSONNEL TO REDISTRIBUTE THIS FILE, PURSUANT
// TO THE FOLLOWING RESTRICTIONS:
//
//     THE ABOVE NOTICE AND ALL EXISTING ADDENDUMS MUST REMAIN UNCHANGED AT THE BEGINNING OF THIS C++ FILE.
//
//     WEG ACCEPTS FULL RESPONSIBILITY AND LIABILITY FOR ANY USAGE OF THIS FILE BY THIRD-PARTIES IT
//     AUTHORIZES, PURSUANT TO THEIR OWN TERMS AND RESTRICTIONS, WHICH MUST NOT PLACE ANY FURTHER LIABILITY
//     UPON MMP.
//
// ADDENDUM: ALL PARTIES ARE GRANTED NON-EXCLUSIVE LICENSE TO REDISTRIBUTE THE COMPILED FORM OF THIS C++ FILE
// FOR THE PURPOSES OF STATIC OR DYNAMIC CODE LINKING, SUCH AS IN THE FORM OF A WINDOWS DYNAMIC-LINK LIBRARY
// ("DLL") FILE. THIS ADDENDUM DOES NOT APPLY TO THE NON-COMPILED SOURCE OF THIS C++ FILE.
//
// ADDENDUM: ADDITIONAL RESTRICTIONS AND DEFINITION OF TERMS MAY BE INCLUDED IN A SEPARATE FILE NAMED
// "LICENSE" ("THE LICENSE FILE"), WITH NO TRAILING FILE EXTENSION. THE LICENSE FILE WILL BE WRITTEN IN PLAIN-
// TEXT, IN THE ENGLISH LANGUAGE, WITH A UTF-8 CHARACTER ENCODING. THE LICENSE FILE AND THIS ADDENDUM MAY BE
// AMENDED AS NECESSARY BY ANY AUTHORIZED PERSONS, WHILE UNAUTHORIZED CHANGES WILL BE NULL AND VOID.
//
#ifndef AGSteam_SteamStats_H
#define AGSteam_SteamStats_H

#ifdef _WIN32
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#endif // WIN32_LEAN_AND_MEAN
#elif !defined(OutputDebugString) // !_WIN32
#define OutputDebugString(X) (void)X
#endif // _WIN32, !OutputDebugString

#include "steam/steam_api.h"

enum StatTypes
{
    eStatInt = 0,
    eStatFloat = 1,
    eStatAvgRate = 2
};

class SteamStat
{
private:
    uint32 AppID; // the game's application ID
    bool Initialized; // whether the game has received a callback from Steam

public:
    SteamStat();
    ~SteamStat();

    int GetIntStat(char const *name); // retrieves a stat
    float GetFloatStat(char const *name);
    float GetAvgRateStat(char const *name);
    bool RequestStats(); // requests info from Steam
    bool SetIntStat(char const *name, int value); // sets a stat
    bool SetFloatStat(char const *name, float value);
    bool StoreStats(); // stores stats in Steam
    bool UpdateAvgRateStat(char const *name, float numerator, float denominator); // updates average rate with new data
    int GetGlobalIntStat(char const *name);
    float GetGlobalFloatStat(char const *name);

    STEAM_CALLBACK(SteamStat, OnUserStatsReceived, UserStatsReceived_t, CallbackUserStatsReceived);
    STEAM_CALLBACK(SteamStat, OnUserStatsStored, UserStatsStored_t, CallbackUserStatsStored);
    #ifndef STEAM_CALLRESULT
    #define STEAM_CALLRESULT(thisclass, func, param, var) CCallResult<thisclass, param> var; void func(param *pParam, bool bIOFailure);
    #define AGSTEAM_CALLRESULT
    #endif // !STEAM_CALLRESULT
    STEAM_CALLRESULT(SteamStat, OnGlobalStatsReceived, GlobalStatsReceived_t, CallResultGlobalStatsReceived);
    #ifdef AGSTEAM_CALLRESULT
    #undef STEAM_CALLRESULT
    #undef AGSTEAM_CALLRESULT
    #endif // AGSTEAM_CALLRESULT
};

int SteamStat_GetIntStat(char const*);
float SteamStat_GetFloatStat(char const*);
float SteamStat_GetAvgRateStat(char const*);
int SteamStat_SetIntStat(char const*, int);
int SteamStat_SetFloatStat(char const*, float);
int SteamStat_UpdateAvgRateStat(char const*, float, float);
void SteamStat_ResetStats();
int SteamStat_GetGlobalIntStat(char const*);
float SteamStat_GetGlobalFloatStat(char const*);

#endif // AGSteam_SteamStats_H
